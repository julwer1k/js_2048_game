{"version":3,"sources":["scripts/main.js"],"names":["board","startButton","document","getElementsByClassName","startMessage","restartButton","lostMessage","winMessage","scoreBoard","tiles","ROWS","COLUMNS","score","gameOver","printBoard","r","c","tile","createElement","num","id","toString","updateTile","getElementById","append","checkEndGame","endGame","classList","remove","isEmpty","addNum","found","Math","floor","random","innerText","add","setTimeout","filterZero","row","filter","number","value","slide","i","length","push","slideLeft","moveLeftRight","slideRight","slideUp","moveUppDown","slideDown","direction","reverse","column","currentTile","addEventListener","Array","from","forEach","className","event","key"],"mappings":"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","file":"main.f426bc4a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.getElementsByClassName('button--start')[0];\nconst startMessage = document.getElementsByClassName('message--start')[0];\nconst restartButton = document.getElementsByClassName('button--restart')[0];\nconst lostMessage = document.getElementsByClassName('message--lose')[0];\nconst winMessage = document.getElementsByClassName('message--win')[0];\nconst scoreBoard = document.getElementsByClassName('game-score')[0];\nconst tiles = document.getElementsByClassName('tile');\n\n// Variables\nconst ROWS = 4;\nconst COLUMNS = 4;\nlet board;\nlet score = 0;\nlet gameOver = false;\n\nfunction printBoard() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < ROWS; r++) {\n    for (let c = 0; c < COLUMNS; c++) {\n      const tile = document.createElement('div');\n      const num = board[r][c];\n\n      tile.id = r.toString() + '-' + c.toString();\n      updateTile(tile, num);\n\n      document.getElementById('board').append(tile);\n    }\n  }\n}\n\nstartButton.addEventListener('click', function startGame() {\n  printBoard();\n  startButton.classList.add('button--hidden');\n  startMessage.classList.add('message--hidden');\n  restartButton.classList.remove('button--hidden');\n  addNum();\n  addNum();\n});\n\nrestartButton.addEventListener('click', function restartGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  const tilesArray = Array.from(tiles);\n\n  tilesArray.forEach((tile) => {\n    tile.innerText = '';\n    tile.className = 'tile';\n  });\n\n  score = 0;\n  scoreBoard.innerText = score;\n  lostMessage.classList.add('message--hidden');\n  winMessage.classList.add('message--hidden');\n  gameOver = false;\n  addNum();\n  addNum();\n});\n\nfunction checkEndGame() {\n  if (endGame()) {\n    gameOver = true;\n    lostMessage.classList.remove('message--hidden');\n  }\n}\n\nfunction isEmpty() {\n  for (let r = 0; r < ROWS; r++) {\n    for (let c = 0; c < COLUMNS; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addNum() {\n  if (!isEmpty()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * ROWS);\n    const c = Math.floor(Math.random() * COLUMNS);\n\n    if (board[r][c] === 0) {\n      const num = Math.random() < 0.1 ? 4 : 2;\n\n      board[r][c] = num;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = num.toString();\n      tile.classList.add(`tile--${num}`);\n\n      tile.classList.add('tile--pop');\n\n      setTimeout(function() {\n        tile.classList.remove('tile--pop');\n      }, 500);\n      found = true;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', event => {\n  if (gameOver) {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      addNum();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      addNum();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      addNum();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      addNum();\n      break;\n  }\n  scoreBoard.innerText = score;\n});\n\nfunction filterZero(row) {\n  return row.filter(number => number !== 0);\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('tile');\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n\n    if (num <= 2048) {\n      tile.classList.add(`tile--${num}`);\n\n      if (num === 2048) {\n        winMessage.classList.remove('message--hidden');\n        gameOver = true;\n      }\n    }\n  }\n}\n\nfunction slide(row) {\n  // eslint-disable-next-line no-param-reassign\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  row = filterZero(row);\n\n  while (row.length < COLUMNS) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  moveLeftRight('left');\n}\n\nfunction slideRight() {\n  moveLeftRight('right');\n}\n\nfunction slideUp() {\n  moveUppDown('up');\n}\n\nfunction slideDown() {\n  moveUppDown('down');\n}\n\nfunction moveLeftRight(direction) {\n  checkEndGame();\n\n  for (let r = 0; r < ROWS; r++) {\n    let row = board[r];\n\n    switch (direction) {\n      case 'left':\n        row = slide(row);\n        board[r] = row;\n        break;\n\n      case 'right':\n        row.reverse();\n        row = slide(row);\n        board[r] = row.reverse();\n        break;\n    }\n\n    for (let c = 0; c < COLUMNS; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction moveUppDown(direction) {\n  checkEndGame();\n\n  for (let c = 0; c < COLUMNS; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    switch (direction) {\n      case 'up':\n        row = slide(row);\n        break;\n\n      case 'down':\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        break;\n    }\n\n    for (let r = 0; r < ROWS; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction endGame() {\n  if (isEmpty()) {\n    return false;\n  }\n\n  for (let row = 0; row < ROWS; row++) {\n    for (let column = 0; column < COLUMNS; column++) {\n      const currentTile = board[row][column];\n\n      if (column < COLUMNS - 1 && currentTile === board[row][column + 1]) {\n        return false;\n      }\n\n      if (row < ROWS - 1 && currentTile === board[row + 1][column]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}